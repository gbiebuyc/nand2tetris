// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isInstrA);
    Not(in=isInstrA,        out=isInstrC);
    And(a=instruction[3], b=isInstrC, out=writeM);
    And(a=instruction[4], b=isInstrC, out=DLoad);
    Or (a=instruction[5], b=isInstrA, out=ALoad);
    DRegister(in=outALU, load=DLoad, out=x);
    ARegister(in=inA, load=ALoad, out[0..14]=addressM, out=outA);
    ALU(x=x, y=y,
        zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6],
        out=outALU, out=outM, zr=zr, ng=ng);
    Mux16(a=instruction, b=outALU, sel=isInstrC, out=inA);
    Mux16(a=outA, b=inM, sel=instruction[12], out=y);
    Not(in=PCLoad, out=PCInc);
    PC(in=outA, load=PCLoad, inc=PCInc, reset=reset, out[0..14]=pc);
    Not(in=isLE, out=isGT);   // JGT
    Not(in=ng, out=isGE);     // JGE
    Not(in=zr, out=isNE);     // JNE
    Or(a=zr, b=ng, out=isLE); // JLE
    Mux8Way16(a[0]=false, b[0]=isGT, c[0]=zr, d[0]=isGE,
              e[0]=ng, f[0]=isNE, g[0]=isLE, h[0]=true,
              sel=instruction[0..2], out[0]=jump);
    And(a=jump, b=isInstrC, out=PCLoad);
}
